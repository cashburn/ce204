public class ExpTree {
    private int type;
    private int value;
    private ExpTree left, right;

    public ExpTree (int typ, int val, ExpTree l, ExpTree r) {
        //TODO: check that type fits value etc.
        if (typ == 0) {
            if (val < 0) {
                throw new TreeException("ERROR: negative integer");
            }
            if (l != null || r != null) {
                throw new TreeException("ERROR: number cannot have children");
            }
        }
        if (typ == 1) {
            if (val < 'A' || val > 'Z') {
                throw new TreeException("ERROR: incorrect identifier");
            }
            if (l != null || r != null) {
                throw new TreeException("ERROR: identifier cannot have children");
            }
        }
        if (typ == 2) {
            if (val != '+' && val != '-' && val != '*' && val != '/' &&
                    val != '%' && val != '^') {
                throw new TreeException("ERROR: incorrect operator")
            }
            if (l == null || r == null)
                throw new TreeException("ERROR: operator must have children")
        }
        type = typ;
        value = val;
        left = l;
        right = r;
    }

    public String postString() {
        String s = "";
        return postString(s);
    }
    private String postString(String s) {
        s += value;
        if (left != null) {
            s += left.postString(s);
        }
        if (right != null) {
            s += right.postString(s);
        }
        return s;
    }
}

public class TreeException extends RuntimeException {
    public TreeException(String s) {
        super(s);
    }
}
